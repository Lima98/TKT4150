#import "@preview/dvdtyp:1.0.1": *

#show: dvdtyp.with(
  title: "Exercise 2",
  subtitle: [TKT4150 - Biomechanics],
  author: "Jan-Øivind Lima",
  accent: highlight,
)

#show link: underline
#show link: set text(fill: highlight)

#set math.mat(delim: "[")

#outline(depth: none)

= Assignment 2
== Exercise 1: Cauchy’s stress theorem used on the foot of a running human

=== Rewrite the Cauchy stress theorem in index notation.
The Cauchy stress theorem states that the traction vector $t$ on a surface with normal vector $n$ is given by the stress tensor $sigma$ acting on the normal vector. In index notation, this can be expressed as:
$ T_j^((n)) = sigma_(i j) n_i $
where $t_i$  is the $i$-th component of the traction vector, $sigma_(i j)$  is the stress tensor, and $n_i$ is the $i$-th component of the normal vector.

=== The foot of a running human is exposed to a force from the ground, as is seen in Figure 1. Let’s say the stress matrix corresponding to a point on the foot where the foot hits the ground is assumed to be: $ T = mat(0,20,0;20,-40,0;0,0,0)M P a $ Find an estimate of the angle, α, on which the force from the ground acts on the foot.
#figure(
image("images/running.png", width: 50%),
caption: "Running human",
)

To find the angle α on which the force from the ground acts on the foot, we first need to determine the traction vector $t$ using the Cauchy stress theorem. The normal vector $n$ for the surface where the foot hits the ground can be assumed to be pointing upwards, which can be represented as $n = mat(0; 1; 0)$.
Using the stress matrix $sigma = mat(0,20,0;20,-40,0;0,0,0) M P a$, we can calculate the traction vector $t$ as follows:

$ t = sigma n $
Calculating this gives:

$ t = mat(0,20,0;20,-40,0;0,0,0) mat(0;1;0) = mat(20;-40;0) M P a $
The traction vector $t$ has components $t_x = 20 M P a$, $t_y = -40 M P a$, and $t_z = 0 M P a$. The angle α can be found using the arctangent function:

$ alpha = arctan(t_y / t_x) $
Substituting the values of $t_x$ and $t_y$ gives:

$ alpha = arctan(-40 / 20) approx bold(-63.43°) $

== Exercise 2: Computational Principal Stress Analysis
For the following stress matrix:
$ bold(T) = mat(90,-30,0;-30,120,-30;0,-30,90)M P a $ you will  calculate the principal stresses, and directions, as well as use Python, Matlab or another computational tool of your choice to calculate these quantities as well. The file Tensor_calculations_exercise.ipynb is an IPython Notebook to help you get started if you would like. You can upload this to a Jupyter Notebook server and get started if you do not have access to Python on your local computer. Remember that to save your progress in the notebook on an external server, you likely need to download the notebook.

=== Establish the principal stresses σ1, σ2 and σ3, and the corresponding directions n1, n2 and n3 with hand-calculations.

To find the principal stresses and directions, we need to solve the characteristic equation given by the determinant of $(sigma I - T) = 0$, where $I$ is the identity matrix and $sigma$ represents the principal stresses. The stress matrix is given as:
$ T = mat(90,-30,0;-30,120,-30;0,-30,90) M P a $
We first compute the matrix $(sigma I - T)$:
$ sigma I - T = mat(sigma - 90, 30, 0; 30, sigma - 120, 30; 0, 30, sigma - 90) $
Next, we calculate the determinant of this matrix and set it to zero:
$ det(sigma I - T) = (sigma - 90)((sigma - 120)(sigma - 90) - 900) - 30(30(sigma - 90)) $
Expanding this determinant, we get the characteristic polynomial:
$ sigma^3 - 300 sigma^2 + 27000 sigma - 720000 = 0 $
To find the roots of this cubic polynomial, we can use numerical methods or factorization. The roots of this polynomial give us the principal stresses:
$ sigma_1 approx 150 M P a $
$ sigma_2 approx 90 M P a $
$ sigma_3 approx 60 M P a $
Next, we find the corresponding principal directions by solving the equation $(T - sigma_i I) n_i = 0$ for each principal stress $sigma_i$.

=== Find the numerical values for the three stress invariants I, II and III, using Python or Matlab.

#let python_code = read("code/ex2.1.2.py")

#raw(python_code, block: true, lang: "python")

The output of the Python code gives the stress invariants as:
$ I_1 = 300 M P a $
$ I_2 = 27900 (M P a)^2 $
$ I_3 = 810000 (M P a)^3 $

=== Use the invariants to determine the characteristic polynomial from the eigenvalue problem. Furthermore, plot the polynomial and graphically determine the principal stresses.


Using the stress invariants $I_1$, $I_2$, and $I_3$, we can construct the characteristic polynomial for the eigenvalue problem as follows:
$ p(sigma) = sigma^3 - I_1 sigma^2 + I_2 sigma - I_3 $
Substituting the values of the invariants, we get:
$ p(sigma) = sigma^3 - 300 sigma^2 + 27900 sigma - 810000 $


#figure(
image("images/ex2.1.3-plot.png", width: 80%),
caption: "Characteristic polynomial plot, generated by the python code.",
)

To graphically determine the principal stresses, we can plot this polynomial and look for the points where it intersects the x-axis (i.e., where $p(sigma) = 0$). The x-coordinates of these intersection points correspond to the principal stresses.

The plot of the characteristic polynomial shows that the principal stresses are approximately:
$ sigma_1 approx 150 M P a $
$ sigma_2 approx 90 M P a $
$ sigma_3 approx 60 M P a $

=== Use Python or Matlab to find the solutions of the characteristic polynomial.

The output from the code show in the appendix gives the principal stresses as:
$ sigma_1 = 150.0 M P a $
$ sigma_2 = 90.0 M P a $
$ sigma_3 = 60.0 M P a $

=== Use the linear algebra library of Python or Matlab to directly solve for the principal stresses and corresponding directions.

Hint: Use eig to direclty solve for the principal stresses and corresponding direction. 
np.linalg.eig??

Using the linear algebra library in Python, we can directly compute the eigenvalues and eigenvectors of the stress matrix $T$ using the `np.linalg.eig` function. The eigenvalues correspond to the principal stresses, and the eigenvectors correspond to the principal directions.

The output from the code show in the appendix gives the principal stresses as:
$ sigma_1 = 150.0 M P a $
$ sigma_2 = 90.0 M P a $
$ sigma_3 = 60.0 M P a $

=== Plot the principal direction vectors ni (i=1,2,3) using Python or Matlab. (Make sure it is possible to see how they are oriented relative to each other. It may be necessary to have two figures from diﬀerent angles.)

#figure(
image("images/ex2.1.3-directions.png", width: 95%),
caption: "3D plot of principal directions from two different angles, generated by the python code.",
)

=== The maximum shear stress is found in an orientation between the directions of the smallest and largest principal stresses, σ1 and σ3, and in the plane normal to the direction of σ2. Determine the orientation where the stress element gets the largest shear stress, and the numerical value of this stress. Plot the found normal vector together with the vectors in the previous problem.


The maximum shear stress $tau_(max)$ can be calculated using the formula:
$ tau_(max) = (sigma_1 - sigma_3) / 2 $
Substituting the values of the principal stresses, we get:
$ tau_(max) = (150 M P a - 60 M P a) / 2 = 45 M P a $
The orientation where the stress element experiences the largest shear stress is in the plane normal to the direction of $sigma_2$. The normal vector can be found by taking the cross product of the principal direction vectors corresponding to $sigma_1$ and $sigma_3$.

#figure(
image("images/ex2.1.3-shear.png", width: 95%),
caption: "3D plot of principal directions and maximum shear stress direction, generated by the python code.",
)

#pagebreak()

= Appendix - Python code
== 1.2.b) Calculation of stress invariants
#raw(read("code/ex2.1.2.py"), block: true, lang: "python")
== 1.3.c,d,e,f) Plotting the characteristic polynomial, and linalg etc...
#raw(read("code/ex2.1.3.py"), block: true, lang: "python")